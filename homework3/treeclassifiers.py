# -*- coding: utf-8 -*-
"""TreeClassifiers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b3lBysi-kB78NX4f3mR78Th-2s_q1bri
"""

import csv
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import PredefinedSplit
import matplotlib.pyplot as plt
from sklearn import metrics

clauses = [300, 500, 1000, 1500, 1800]
samples = [100, 1000, 5000]
dataset = ['train', 'valid', 'test']
base_path = 'hw3_part1_data'

final_result = {}
for sample in samples:
    for clause in clauses:
        data = [0] * len(dataset)
        label = [0] * len(dataset)
        for i, sets in enumerate(dataset):
            x = []
            y = []
            with open(base_path + '/' + sets + '_c' + str(clause) + '_d' + str(sample) + '.csv', newline='') as csvfile:
                for row in csv.reader(csvfile):
                    x.append([int(x)for x in row[:len(row) - 1]])
                    y.append(int(row[-1]))
                data[i] = x
                label[i] = y
        split = []
        for _ in data[0]:
            split.append(0)
        for _ in data[1]:
            split.append(1)
        ps = PredefinedSplit(test_fold=split)
        DecisionTreeClassifierParams = {
            "criterion": ["gini", "entropy"],
            "splitter": ["best", "random"],
            "max_features": [None, "auto", "sqrt", "log2", len(data[0][0])],
            "max_depth": [None, 80, 100, 120, 150, 200],
            "class_weight": [None, "balanced"]
        }
        name = str(clause) + "_" + str(sample)
        print(name)
        a = DecisionTreeClassifier()
        grid = GridSearchCV(a, DecisionTreeClassifierParams, n_jobs=-1, cv=ps)
        grid.fit(data[0]+data[1], label[0]+label[1])
        params = grid.best_params_
        print(params)
        dec = DecisionTreeClassifier(criterion=params['criterion'], splitter=params['splitter'],
                                     max_features=params['max_features'], max_depth=params['max_depth'], class_weight=params['class_weight'])
        dec.fit(data[0]+data[1], label[0]+label[1])
        pred = dec.predict(data[2])
        print(metrics.accuracy_score(label[2], pred))
        print(metrics.f1_score(label[2], pred))

        final_result.setdefault(name, {})
        final_result[name]['params'] = params
        final_result[name]['f1_score'] = metrics.f1_score(label[2], pred)
        final_result[name]['accuracy_score'] = metrics.accuracy_score(label[2], pred)
print(final_result)
